1. What is a binary tree and what makes it unique to other trees?

    A: Is a Data structure made of nodes that contain a left and a right pointers,  the first node is the root node and each sbsequent one is called a child node, an ordered binary tree  is where the nodes are arranged in order: for each node all elements to the left are less and to the right are greater than the node. 

2. What is a heuristic?

    A: is an approach to problems that does not follow any perfect logic or rational but is good enough to achieve a desired result that is  sufficient for the problem. an estimation or rounding, mostly used when case by case analysis would be impractical.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

    A:  Weather forecasting for example many times uses a heuristic model that although adapts to minute changes, can only manage an educated guess on the possible path of a hurricane or storm.
 
4. What is the difference between a depth-first search and a breadth-first search?

    A: a depth-first search can be seen as vertical down the branches of a tree before moving to the next branch, whereas a breath-first search looks at all branches at the same level before moving down and again searching every branch on that level.
 
5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

    A: Is a graph that connects each node as a two-way street, without forming any loops, and that doesn't assign the cost of travel
between nodes.
 
6. What kind of graph is a binary search tree?

    A: A-cyclic, directed, unweighted.
 
Programming Questions

1. Given a Binary Search Tree and a data, write a function that checks to see whether the data exists within the tree.

Example: The data 10 exists in the tree. The data 23 does not exist in the tree.


function Node(data) {
  this.data = data;
  this.left = null;
  this.right = null;
}

function BinarySearchTree() {
  this.root = null;
}

BinarySearchTree.prototype.add = function(data) {
  var node = new Node(data);
  if(!this.root) {
    this.root = node;
  } else {
    var current = this.root;
    while(current) {
      if(node.data < current.data) {
        if(!current.left) {
          current.left = node;
          break;
        }
        current = current.left;
      } else if (node.data > current.data) {
        if(!current.right) {
          current.right = node;
          break;
        }
        current = current.right;
      } else {
        break;
      }
    }
  }
};
BinarySearchTree.prototype.find = function(data) {
  var current = this.root;

  while (current.data !== data) {
    if (data < current.data) {
      current = current.left;
    } else {
      current = current.right;
    }
    if (current === null) {
      return `${data} not found`;
    }
  } return `${data} found`'
};


// for testing

const orchard = new BinarySearchTree();

orchard.add(10);
orchard.add(4);
orchard.add(17);
orchard.add(3);
orchard.add(6);
orchard.add(22);
orchard.add(5);
orchard.add(7);
orchard.add(20);

orchard.find(10);
orchard.find(23);


2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

    to find the distance between two binary nodes you can use the following formula
     Dist(n1, n2) = Dist(root, n1) + Dist(root, n2) - 2*Dist(root, lca)  it calculates the  sum of the distance from each node to the root node minus the distance from the root node to their local common ancestor
     but is simpler to find the distance from each node to their lower common ancestor and add them. 


class Node{
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree{
  constructor() {
    this.root = null;
}
  add(data) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      const searchTree = function(node) {
        if (data < node.data) {
          if (node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }

  find(value) {
    var current = this.root;
    while (current.data !== value) {
      if (value < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
      if (current === null) {
        return `${value} not found`;
      }
    }
    if(current.data === value)
      return `${value} found`;
    
  }

  getDistance(node1, node2) {
    var root = this.root;
    var ancestor = LCA(root, node1, node2);
    var depth1 = getDepth(ancestor, node1); 
    var depth2 = getDepth(ancestor, node2); 
  
    function LCA(currentNode, node1, node2) {
      if (currentNode == null)
        return null;
      if (currentNode.data == node1 || currentNode.data == node2)
        return currentNode;
      var left = LCA(currentNode.left, node1, node2); 
      var right = LCA(currentNode.right, node1, node2); 
      if(left != null && right != null)
        return currentNode;
      return left == null? right: left;
      }

    function getDepth(currentNode, targetNode) {
      if (currentNode == null)
        return -1;
      if (currentNode.data == targetNode)
        return 0;
      var left = getDepth(currentNode.left, targetNode);
      var right = getDepth(currentNode.right, targetNode);
      if (left == -1 && right == -1)
        return -1;
      return left == -1? right + 1: left + 1;
    }
    return depth1 +  depth2;
  }
}

// for testing

const orchard = new BinarySearchTree();

orchard.add(7);
orchard.add(4);
orchard.add(14);
orchard.add(3);
orchard.add(6);
orchard.add(8);
orchard.add(5);
orchard.add(1);
orchard.add(10);

orchard.getDistance(8, 10);
orchard.getDistance(4, 10);
orchard.getDistance(1, 14);